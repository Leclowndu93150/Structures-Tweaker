package com.leclowndu93150.structures_tweaker.config.core;

import com.leclowndu93150.structures_tweaker.config.properties.ConfigProperty;
import com.leclowndu93150.structures_tweaker.config.properties.ConfigRegistry;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;

public class ConfigDocumentationGenerator {
    
    public static void generateReadmeAndDocumentation(Path configDir) {
        try {
            generateReadme(configDir);
            generateAvailableConfigs(configDir);
        } catch (IOException e) {
            System.err.println("Failed to generate config documentation: " + e.getMessage());
        }
    }
    
    private static void generateReadme(Path configDir) throws IOException {
        String content = """
Structures Tweaker Configuration Guide
=====================================

This folder contains configuration files for the Structures Tweaker mod.

GLOBAL CONFIGURATION
-------------------
The 'global.json' file sets default behavior for ALL structures. 
Configure your server-wide settings here first.

INDIVIDUAL STRUCTURE CONFIGS
---------------------------
Each structure can have its own config file in subfolders by mod:
  - minecraft/village_plains.json
  - dungeons_arise/shiraz_palace.json
  - etc.

These individual files only need to contain settings that differ from
the global defaults. For example:

global.json (server defaults):
{
  "config": {
    "canBreakBlocks": false,
    "canPlaceBlocks": false,
    "blockBreakWhitelist": ["minecraft:spawner", "minecraft:chest"],
    "blockPlaceWhitelist": ["minecraft:torch", "minecraft:ladder"]
  }
}

minecraft/stronghold.json (dungeon with restrictions):
{
  "individualOverrides": {
    "canBreakBlocks": false,
    "blockBreakBlacklist": ["minecraft:end_portal_frame", "minecraft:bedrock"]
  }
}

In this setup, most structures prevent breaking/placing blocks but allow
torches and ladders to be placed. The stronghold specifically prevents
breaking the end portal frame, even if breaking becomes allowed.

HOW PRIORITY WORKS
-----------------
Settings are applied in this order:
1. Individual structure config (highest priority)
2. Global config 
3. Mod defaults (if nothing else is set)

AVAILABLE SETTINGS
-----------------
""" + generateSettingsDocumentation() + """

TIPS
----
- Start by configuring global.json with your server's base rules
- Only create individual configs for structures that need exceptions
- Delete individual config files to make structures use global defaults
- The mod automatically cleans up old/invalid settings from files
- Changes take effect after server restart or /reload command
- See availableconfigs.txt for a complete list of all config options
""";
        
        Files.writeString(configDir.resolve("README.txt"), content);
    }
    
    private static void generateAvailableConfigs(Path configDir) throws IOException {
        StringBuilder content = new StringBuilder();
        content.append("Available Configuration Options\n");
        content.append("===============================\n\n");
        content.append("This file is automatically generated and shows all available config options.\n\n");
        
        for (ConfigProperty<?> property : ConfigRegistry.getAllProperties().values()) {
            content.append(String.format("%-25s: %s (default: %s)\n", 
                property.getKey(), 
                property.getDescription(), 
                property.getDefaultValue()
            ));
        }
        
        content.append("\nExample JSON usage:\n");
        content.append("{\n");
        content.append("  \"config\": {\n");
        
        boolean first = true;
        for (ConfigProperty<?> property : ConfigRegistry.getAllProperties().values()) {
            if (!first) content.append(",\n");
            content.append(String.format("    \"%s\": %s", 
                property.getKey(), 
                formatDefaultValue(property.getDefaultValue())
            ));
            first = false;
        }
        
        content.append("\n  }\n");
        content.append("}\n");
        
        Files.writeString(configDir.resolve("availableconfigs.txt"), content.toString());
    }
    
    private static String generateSettingsDocumentation() {
        StringBuilder sb = new StringBuilder();
        for (ConfigProperty<?> property : ConfigRegistry.getAllProperties().values()) {
            sb.append(String.format("- %-20s: %s (default: %s)\n", 
                property.getKey(), 
                property.getDescription(),
                property.getDefaultValue()
            ));
        }
        return sb.toString();
    }
    
    private static String formatDefaultValue(Object value) {
        if (value instanceof String) {
            return "\"" + value + "\"";
        } else if (value instanceof Boolean) {
            return value.toString();
        } else if (value instanceof Number) {
            return value.toString();
        } else if (value instanceof List<?> list) {
            if (list.isEmpty()) {
                return "[]";
            }
            StringBuilder sb = new StringBuilder("[");
            boolean first = true;
            for (Object item : list) {
                if (!first) sb.append(", ");
                sb.append("\"").append(item).append("\"");
                first = false;
            }
            sb.append("]");
            return sb.toString();
        }
        return "\"" + value + "\"";
    }
}